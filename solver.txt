public InnerPolygonBoundaryProblemOutput solver( ) 
        {
            /////solve method for solving triangulation problems
            StreamWriter writer = new StreamWriter("Matrices.txt");

            n = domain.Meshes.FormaElementa * domain.Meshes.Approximation.ApproximationDegree;//
            double[][] matrix = new double[domain.Meshes.PointsCount][];//матриця зчитування зовнішніх точок границі [] one list of point or all points
            for (int i = 0; i < domain.Meshes.PointsCount; ++i)
            {
                matrix[i] = new double[domain.Meshes.PointsCount];
            }
            double[] vector = new double[domain.Meshes.PointsCount];//вектор 

            for (int i = 0; i < domain.Meshes.ElementCount; ++i)
            {
                int[] numberOfPoints = domain.Meshes.GetElement(i);//номери точок трикутника 
                double[][] trianglePoints = new double[n][];
                for (int j = 0; j < n; j++)
                {
                    trianglePoints[j] = new double[2];//x,y //or domain.Meshes.DomainDimention
                }
                for (int j = 0; j < n; j++)
                {
                    for (int k = 0; k < 2; k++)//domain.Meshes.DomainDimention
                    {
                        trianglePoints[j][k] = domain.Meshes.Points[numberOfPoints[j]][k];
                    }
                }
                double doubleSquare = 0;
                for (int j = 0; j < (n - 1); j++)
                {
                    doubleSquare += trianglePoints[j][0] * trianglePoints[j + 1][1] -
                         trianglePoints[j + 1][0] * trianglePoints[j][1];
                }
                doubleSquare += trianglePoints[n - 1][0] * trianglePoints[0][1] -
                    trianglePoints[0][0] * trianglePoints[n - 1][1];

                writer.WriteLine("Area "+doubleSquare+"\n");

                double factor = 1.0 / (2.0 * doubleSquare); //   * або  /
                double[] a = new double[domain.Meshes.FormaElementa]; //ф-ла 2.42
                double[] b = new double[domain.Meshes.FormaElementa];
                double[] c = new double[domain.Meshes.FormaElementa];
                for (int j = 0; j < domain.Meshes.FormaElementa; j++)
                {
                    a[j] = trianglePoints[(j + 1) % 3][0] * trianglePoints[(j + 2) % 3][1] - trianglePoints[(j + 2) % 3][0] * trianglePoints[(j + 1) % 3][1];
                    b[j] = trianglePoints[(j + 1) % 3][1] - trianglePoints[(j + 2) % 3][1];
                    c[j] = trianglePoints[(j + 2) % 3][0] - trianglePoints[(j + 1) % 3][0];
                }

                double[][] keMatrix = new double[n][];
                for (int j = 0; j < n; j++)
                {
                    keMatrix[j] = new double[n];
                    keMatrix[j][j] = factor * (Physics.a11 * b[j] * b[j] + Physics.a22 * c[j] * c[j]);//клас - коефіцієнти дифузії 3.61
                }
                for (int j = 1; j < n; j++)
                {
                    for (int k = 0; k < j; k++)
                    {
                        keMatrix[k][j] = keMatrix[j][k] = factor * (Physics.a11 * b[k] * b[j] + Physics.a22 * c[k] * c[j]);
                    }
                }
                factor = doubleSquare / 24.0;
                double df = 2.0 * factor;
                double[][] meMatrix = new double[n][];
                for (int j = 0; j < n; j++)
                {
                    meMatrix[j] = new double[n];
                    meMatrix[j][j] = df;
                }
                for (int j = 1; j < n; j++)
                {
                    for (int k = 0; k < j; k++)
                    {
                        meMatrix[k][j] = meMatrix[j][k] = factor;
                    }
                }

                double[] fvector = new double[n];
                for (int j = 0; j < n; j++)
                {
                    fvector[j] = Physics.f(trianglePoints[j][0], trianglePoints[j][1]);
                    //fvector[j] = f[j];  //права частина - ф-ція джерел
                }
                double[] qe = multiply(meMatrix, fvector);

                //розсилка локальних матриць
                for (int j = 0; j < n; j++)
                {
                    for (int k = 0; k < n; k++)
                    {
                        // MessageBox.Show("j = " + j + "k = " + k + "num[j]" + numberOfPoints[j] + " num[k] = " + numberOfPoints[k]);
                        matrix[numberOfPoints[j]][numberOfPoints[k]] += keMatrix[j][k]+ Physics.d * meMatrix[k][j];//
                    }
                }
                //writing matrix
                writer.WriteLine(" matrix "+i);
                for (int k = 0; k < matrix.Length; k++)
                {
                    for (int j = 0; j < matrix[k].Length; j++)
                    {
                        writer.Write(String.Format("{0:0.000}", matrix[k][j]) + " ");
                    }
                    writer.WriteLine();
                }
                writer.WriteLine();
                ///end writing
                ///////writing
                writer.WriteLine("\n"+"ke matrix");
                for (int j = 0; j < n; j++)
                {
                    for(int k=0;k<n;k++)
                    {
                        writer.Write(String.Format("{0:0.000}", keMatrix[j][k])+" ");
                    }
                    writer.WriteLine();
                }
                writer.WriteLine("\n" + "me matrix");
                for (int j = 0; j < n; j++)
                {
                    for (int k = 0; k < n; k++)
                    {
                        writer.Write(String.Format("{0:0.000}", meMatrix[j][k]) + " ");
                    }
                    writer.WriteLine();
                }
                writer.WriteLine("\n" + "fvector ");
                for (int j = 0; j < n; j++)
                {                    
                        writer.Write(String.Format("{0:0.000}", fvector[j]) + " ");                    
                }
                writer.WriteLine();
                writer.WriteLine("\n" + "qe vector ");
                for (int j = 0; j < n; j++)
                {
                    writer.Write(String.Format("{0:0.000}",qe[j]) + " ");
                }
                writer.WriteLine();
                // end writing

                for (int j = 0; j < n; j++)
                {
                    vector[numberOfPoints[j]] += qe[j];
                }
            }

            //writing matrix and vector
            writer.WriteLine(" matrix");
            for (int i = 0; i < matrix.Length; i++)
            {
                for (int j = 0; j < matrix[i].Length; j++)
                {
                    writer.Write(String.Format("{0:0.000}",matrix[i][j]) + " ");
                }
                writer.WriteLine();
            }
            writer.WriteLine();
            writer.WriteLine(" vector ");
            for (int j = 0; j < vector.Length; j++)
            {
                writer.Write(String.Format("{0:0.000}", vector[j]) + " ");
            }
            writer.WriteLine();            
            /////////end of writing matix, vector
            
            //обчислення вкладів від границь
            double[] boundaryValues = new double[domain.Meshes.PointsCount];

            int n2 = domain.Meshes.FormaElementa - 1;

            for(int i=0;i<domain.Boundaries.BoundaryArray.Count;i++)
            {
                for(int j=0;j<domain.Boundaries.BoundaryArray[i].Count;j++)
                {
                    for (int r = 0; r < domain.Boundaries.BoundaryArray[i][j].Count; r++)
                    {
                        int number1 = domain.Boundaries.BoundaryArray[i][j][r].numberP1;
                        int number2 = domain.Boundaries.BoundaryArray[i][j][r].numberP2;
                        int[] boundaryNumbers = new int[] { number1, number2 };//індекси загальної матриці

                        Point pStart = new Point(domain.Meshes.Points[number1][0], domain.Meshes.Points[number1][1]);
                        Point pEnd = new Point(domain.Meshes.Points[number2][0], domain.Meshes.Points[number2][1]);                    

                        switch (domain.Boundaries.BoundaryArray[i][j][r].condition)
                        {
                            case (Condition.Dirichlet):
                                {
                                    double length = Math.Sqrt(Math.Pow(pEnd.X - pStart.X, 2) + Math.Pow(pEnd.Y - pStart.Y, 2));
                                    double[][] geMatrix = new double[n2][];//ліва частина 
                                    for (int k = 0; k < n2; k++)
                                    {
                                        geMatrix[k] = new double[n2];
                                        geMatrix[k][k] = (Physics.sigma[i][j] * Math.Pow(10, 16) * 2 * length) / (Physics.beta[i][j] * 6);//sugma[i] * Math.Pow(10, -8) * 2 * length) / (beta[i] * 6);
                                    }
                                    for (int k = 1; k < n2; k++)
                                    {
                                        for (int p = 0; p < k; p++)
                                        {
                                            geMatrix[k][p] = geMatrix[p][k] = (Physics.sigma[i][j] * Math.Pow(10, 16) * length) / (Physics.beta[i][j] * 6);
                                        }
                                    }
                                    writer.WriteLine("\n" + "Dirichlet  " + "\n" + "ge matrix ");
                                    for (int k = 0; k < n2; k++)
                                    {
                                        for (int p = 0; p < n2; p++)
                                        {
                                            writer.Write(String.Format("{0:0.000}", geMatrix[k][p]) + " ");
                                            matrix[boundaryNumbers[k]][boundaryNumbers[p]] += geMatrix[k][p];
                                        }
                                        writer.WriteLine();
                                    }
                                    double[] uEnv = new double[] { Physics.Tc[i][j], Physics.Tc[i][j] };
                                    double[] leVector = multiply(geMatrix, uEnv);
                                    writer.WriteLine("\n" + "le vector ");
                                    for (int k = 0; k < n2; k++)
                                    {
                                        writer.Write(String.Format("{0:0.000}", leVector[k]) + " ");
                                        vector[boundaryNumbers[k]] += leVector[k];   //right side
                                    }
                                    writer.WriteLine();
                                }
                                break;
                            case (Condition.Neumann):
                                {
                                    writer.WriteLine("\n" + "Neuman  " + "\n" + " condition ");
                                    double length = Math.Sqrt(Math.Pow(pEnd.X - pStart.X, 2) + Math.Pow(pEnd.Y - pStart.Y, 2));
                                    double[][] geMatrix = new double[n2][];//ліва частина 
                                    for (int k = 0; k < n2; k++)
                                    {
                                        geMatrix[k] = new double[n2];
                                        geMatrix[k][k] = (Physics.sigma[i][j] * Math.Pow(10, 16) * 2 * length) / (Physics.beta[i][j] * 6);//sugma[i] * Math.Pow(10, -8) * 2 * length) / (beta[i] * 6);
                                    }
                                    for (int k = 1; k < n2; k++)
                                    {
                                        for (int p = 0; p < k; p++)
                                        {
                                            geMatrix[k][p] = geMatrix[p][k] = (Physics.sigma[i][j] * Math.Pow(10, 16) * length) / (Physics.beta[i][j] * 6);
                                        }
                                    }
                                    writer.WriteLine("\n" + "Dirichlet  " + "\n" + "ge matrix ");
                                    for (int k = 0; k < n2; k++)
                                    {
                                        for (int p = 0; p < n2; p++)
                                        {
                                            writer.Write(String.Format("{0:0.000}", geMatrix[k][p]) + " ");
                                            matrix[boundaryNumbers[k]][boundaryNumbers[p]] += geMatrix[k][p];
                                        }
                                        writer.WriteLine();
                                    }
                                    double[] uEnv = new double[] { Physics.Tc[i][j] * Math.Pow(10, -16), Physics.Tc[i][j] * Math.Pow(10, -16) };
                                    double[] leVector = multiply(geMatrix, uEnv);
                                    writer.WriteLine("\n" + "le vector ");
                                    for (int k = 0; k < n2; k++)
                                    {
                                        writer.Write(String.Format("{0:0.000}", leVector[k]) + " ");
                                        vector[boundaryNumbers[k]] += leVector[k];  //right side
                                    }
                                    writer.WriteLine();
                                }
                                break;
                            case (Condition.Robin):
                                {
                                    double length = Math.Sqrt(Math.Pow(pEnd.X - pStart.X, 2) + Math.Pow(pEnd.Y - pStart.Y, 2));
                                    double[][] geMatrix = new double[n2][];//ліва частина                                 
                                    for (int k = 0; k < n2; k++)
                                    {
                                        geMatrix[k] = new double[n2];
                                        geMatrix[k][k] = (Physics.sigma[i][j] * 2 * length) / (Physics.beta[i][j] * 6);
                                    }
                                    for (int k = 1; k < n2; k++)
                                    {
                                        for (int p = 0; p < k; p++)
                                        {
                                            geMatrix[k][p] = geMatrix[p][k] = (Physics.sigma[i][j] * length) / (Physics.beta[i][j] * 6);
                                        }
                                    }

                                    writer.WriteLine("\n" + "Robin  " + "\n" + "ge matrix ");
                                    for (int k = 0; k < n2; k++)
                                    {
                                        for (int p = 0; p < n2; p++)
                                        {
                                            writer.Write(String.Format("{0:0.000}", geMatrix[k][p]) + " ");
                                            matrix[boundaryNumbers[k]][boundaryNumbers[p]] += geMatrix[k][p];
                                        }
                                        writer.WriteLine();
                                    }
                                    double[] uEnv = new double[] { Physics.Tc[i][j], Physics.Tc[i][j] };
                                    double[] leVector = multiply(geMatrix, uEnv);
                                    writer.WriteLine("\n" + "le vector ");
                                    for (int k = 0; k < n2; k++)
                                    {
                                        writer.Write(String.Format("{0:0.000}", leVector[k]) + " ");
                                        vector[boundaryNumbers[k]] += leVector[k];  //right side
                                    }
                                    writer.WriteLine();

                                }
                                break;                             
                        }                 
                    }
                }
            }         

            //writing matrix and vector
            writer.WriteLine(" matrix");
            for (int i = 0; i < matrix.Length; i++)
            {
                for (int j = 0; j < matrix[i].Length; j++)
                {
                    writer.Write(String.Format("{0:0.000}", matrix[i][j]) + " ");
                }
                writer.WriteLine();
            }
            writer.WriteLine();
            writer.WriteLine(" vector ");
            for (int j = 0; j < vector.Length; j++)
            {
                writer.Write(String.Format("{0:0.000}", vector[j]) + " ");
            }
            writer.WriteLine();
            /////////end of writing matix, vector

            ////writing result           

            double[] res = SlaeSolver.GaussMethod(matrix, vector);
            writer.WriteLine(" result ");
            for (int j = 0; j < res.Length; j++)
            {
                writer.WriteLine("res ["+j+"] = "+res[j] + " ");
            }
            writer.WriteLine();
            writer.Close();
            ////
            return new InnerPolygonBoundaryProblemOutput(SlaeSolver.GaussMethod(matrix,vector));//return result
        }